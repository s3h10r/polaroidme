#!/usr/bin/env python3
"""
contactsheet - create a contact sheet for all images in the specified directory

Usage:
  contactsheet <source> <image_out> [--no-meta] [--polaroid]
  contactsheet <source> <image_out> [--sort-by=<str>] [--polaroid] [--nometa] [--reverse]
  contactsheet <source> <image_out> [--ratio=<{square,classic,digital,free}>] [--font=<font>] [--size-thumb=<px>] [--sort-by <str>] [--reverse] [--polaroid] [--nometa]


Example:
  contactsheet ./examples/ testsheet.png --ratio sqaure --font=/tmp/fonts/contrast.ttf

Where:
  source             The directory in which the images reside.
                     (stdin is also possible for feeding filenames by the result of `find` or whatsoever)
  image_out          Filename of the created contact sheet

Options:
  -f, --font=<f>        Specify (ttf-)font to use (full path!)
  --nometa              Show the Thumbnail only - no filename, no datetime, no anything except the picture.
  -r, --ratio=<r>       The aspect ratio of the contact sheet. One of
                        'square' (1:1), 'classic' (2:3) or 'digital' (3:4).
                        The value 'free' means "auto-optimize" (experimental).
                        (default="digital")
  --reverse             Reverts sort-by result.
  --sort-by=<str>       Sort the Images by given criteria. One of 'exif_time', 'time'.
                        (in future versions also 'filename', 'mtime', 'color', ...)
  -s, --size-thumb=<s>  Specifiy width of thumbnail in pixels (default=200)
  -p, --polaroid        Generates Thumbnails with Polaroid-style and filename
                        as caption.

  -h, --help            Print this.
      --version         Print version.

TODO
  --exif-time-from=<ts>  Only include if timestamp of image is >= this value
  --exif-time-to=<ts>    and <= that value. (relies on EXIF)
  --include-noexif       If filtering or sort by exif-data is defined but Image has
                         no EXIF about criteria include it (default = exclude it)
  --min_size=<npixels>   Excludes images smaller than npixels (x*y)
  --random-pick <n>
  --size                 Limit the size of contactsheet
                         => Calculate --size-thumbnail accordingly
  --html                 Create a html-output (bs4, lightbox).

The `latest version is available on github: https://github.com/s3h10r/polaroidme>
"""
"""
TODOs
=====

[ ] option to limit the size of resulting contactsheet. either downscaling after all is done
    or calculating the --size according to this value
    renaming the --size -contactsheet or --size)
[ ] ?putting contactsheet into a seperate project (one tool for one job) which imports polaroidme
    => we culd remove exifread-dependency then from polaroidme
    => using cookiecutter :)
[ ] measure processing time
[ ] generate ()& output) some stats: (nr_images, processing time, excluded images, sumSize of input, min/max/average image-size...)

0.4.4
[ ] option to use high-res scanned blank Polaroid frames as template https://github.com/s3h10r/polaroidme/issues/3

0.4.2
[ ] change usage, add --input <file>|- # option to read from stdin (so the filtering on file-attributes can be done via find etc.)
[P] sorting based on EXIF
[ ] filtering based on exif
[ ] random selection of N pictures based on EXIF data https://github.com/s3h10r/polaroidme/issues/2

0.4.0
[X] supports show filename as caption on thumbnail -> using polaroid.make_polaroid()
[X] selecting font by using an argument --font
0.2.0
[X] "self-optimizing" grid layout (no empty slots) -> aspect_ratio_cs='free'
"""
import sys
import logging
import os
from polaroidme import make_polaroid
from polaroidme import get_images_in_dir, get_exif, sort_images_by_time
from docopt import docopt
from PIL import Image, ImageDraw, ImageFont

# --- configure logging
log = logging.getLogger(__name__)
log.setLevel(logging.INFO)
handler = logging.StreamHandler() # console-handler
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
log.addHandler(handler)
# ---

THUMBNAIL_SIZE = 200 #default
FONT_DEFAULT   = "fonts/arial_narrow_7.ttf"

__version__ = (0,4,1)
__license__ = "MIT"


def make_contact_sheet( fnames = None, ncols = 4,nrows = 4,
                        photow = 360,photoh = 400,
                        marl = 0, mart = 0, marr = 0, marb = 0,
                        padding = 0,
                        thumb_as_polaroid=False, add_text = None,
                        f_font = None ):
    """
    Make a contact sheet from a list of filenames:

    fnames       A list of names of the image files

    ncols        Number of columns in the contact sheet
    nrows        Number of rows in the contact sheet
    photow       The width of the photo thumbs in pixels
    photoh       The height of the photo thumbs in pixels

    marl         The left margin in pixels
    mart         The top margin in pixels
    marr         The right margin in pixels
    marb         The bottom margin in pixels

    padding      The padding between images in pixels

    returns a PIL image object.
    """

    # Calculate the size of the output image, based on the
    #  photo thumb sizes, margins, and padding
    marw = marl+marr
    marh = mart+ marb
    padw = (ncols-1)*padding
    padh = (nrows-1)*padding
    isize = (ncols*photow+marw+padw,nrows*photoh+marh+padh)

    # Create the new image. The background doesn't have to be white
    white = (255,255,255)
    inew = Image.new('RGB',isize,white)

    count = 0
    # Insert each thumb:
    for irow in range(nrows):
        for icol in range(ncols):
            left = marl + icol*(photow+padding)
            right = left + photow
            upper = mart + irow*(photoh+padding)
            lower = upper + photoh
            bbox = (left,upper,right,lower)

            # Read in an image and resize appropriately
            proid_options = {'crop' : False, 'rotate' : None}
            if thumb_as_polaroid:
                title = ""
                if add_text:
                    if isinstance(add_text,list):
                        title = add_text[count]
                    else:
                        log.warning("add_text is set but no text (usually meta_infos) provided as list.")
                img = make_polaroid(fnames[count], 800, proid_options, "center", title=title, f_font = f_font)
            else:
                if add_text:
                    logger.warning("TODO: text/metainfo is only added if --polaroid is used at the moment.")
                    logger.warning("IN A LATER VERSION ADDING TEXT/METAINFO WILL BE IMPLEMENTED GENERIC. FOR NOW PLEASE USE --polaroid TO DO SO.")
            #img = Image.open(fnames[count]).resize((photow,photoh))
                img = Image.open(fnames[count])
            # --- scale the image proportionally to fit the thumbnail box...
            img_bbox = img.getbbox()
            width = img_bbox[2] - img_bbox[0]
            height = img_bbox[3] - img_bbox[1]
            # calculate a scaling factor depending on fitting the larger dimension into the thumbnail
            ratio = max(height/float(photoh), width/float(photow))
            newWidth = int(width/ratio)
            newHeight = int(height/ratio)
            newSize = (newWidth, newHeight)
            img = img.resize(newSize)
            new_left = left
            new_upper = upper
            if ( newWidth < photow):
                new_left = int(left + ((photow - newWidth)/2))
            if ( newHeight < photoh):
                new_upper = int(upper + ((photoh - newHeight)/2))
            inew.paste(img, (new_left, new_upper))
            count += 1
            if count == len(fnames):
                break
        if count == len(fnames):
            break

    return inew

def euclid (a,b): #ggt
    if (b == 0) :
        return a
    else :
        return Euclid (b, (a % b))

def get_factors(x):
    """
    find the factors of a number x

    returns list of factors of x
    """
    res = [] # teh factors of x are ...
    for i in range(1, x + 1):
        if x % i == 0:
            res.append(i)
    return res

def get_optimized_grid(n_elements):
    """
    returns a grid-size where no slot is free
    (excluded are 0 and primes -> (1,n_elements))
    """
    facts = get_factors(n_elements)
    log.debug("the factors of {} are {}".format(n_elements, facts))
    if n_elements in (0,1):
        return None
    if len(facts) == 2:
        log.info("oh! seems we've got a prime ({})? very cool but not usable for the purpose of an optimal grid.".format(n_elements)) # not usable
        return None
    else:
        facts = facts[1:-1] # kick 1 and number itself
        middle_idx = (len(facts) - 1)//2
        fact = facts[middle_idx]
        res = (fact, int(n_elements / fact))
        assert(res[0]*res[1] == n_elements)
        return res


if __name__ == '__main__':
    args = docopt(__doc__, version=__version__)
    # define possible aspect ratios of contact sheet
    aspect_ratio = {
        'square'  : (1,1),
        'classic' : (2,3), # kleinbidkamera
        'digital' : (3,4), # apsc
        'free'    : None   # auto-optimized
    }
    # --- parsing arguments
    source = args['<source>']
    if source.lower() in('-', 'stdin'):
        raise Exception("hey, great idea! :) reading from STDIN is on the top of the TODO-list.")
    f_out = args['<image_out>']
    ar_name = args['--ratio']
    if not ar_name:
        ar_name = 'digital'
    thumb_size = args['--size-thumb']
    as_polaroid = args['--polaroid']
    if not thumb_size:
        thumb_size = THUMBNAIL_SIZE
    else:
        thumb_size = int(thumb_size)
    f_font = args['--font']
    if not f_font:
        f_font = FONT_DEFAULT
    #---
    fqfn_images = None
    if not source.lower() in('-', 'stdin'):
        fqfn_images = get_images_in_dir(source, traversal=True)
    # --- #INPROGRESS sort and filter ...
    sort_reverse = False
    meta_sorted = None
    if args['--reverse']:
        sort_reverse = True
    if args['--sort-by'] in ('exif_time', 'exif_date', 'time', 'date'):
        # iterate over the list of files
        # get meta infos and sort by it
        # kick out images with no infos available for our criteria
        # (if exclude_on_no_data = True)
        fqfn_images_sorted, meta_sorted, nodata = sort_images_by_time(fqfn_images, exclude_on_no_data = True, reverse = sort_reverse, return_meta = True)
        for k,v in meta_sorted.items():
            log.debug(k,v)
        fqfn_images = fqfn_images_sorted
    # ---
    add_text = None
    if not args['--nometa'] and args['--sort-by']:
        add_meta = [str(meta_sorted[fn]) + " " + os.path.basename(fn) for fn in fqfn_images]
        add_text = add_meta
    #---
    nr_images = len(fqfn_images) # how many images made it into the selection
    ncols = None
    nrows = None
    # --- TODO optionally limit size of contactsheet
    # calculate a suiting size-thumb depending on the amount of images we have
    #size = args['--size] #TODO optional limit size of contactsheet
    # --

    # ---
    # calculate grid-dimensions based on the wanted aspect ratio
    # of the contact sheet (h:w)
    if ar_name not in aspect_ratio:
        ar_name = 'digital' # default
    if ar_name == 'free':
        aspect_ratio['free'] = aspect_ratio['square']
    ar_cs = aspect_ratio[ar_name]
    log.info("aspect ratio of Contact Sheet set to {}:{} # ar_w {} / ar_h {} = {}".format(ar_cs[0], ar_cs[1], ar_cs[1], ar_cs[0], ar_cs[1] / ar_cs[0]))
    for i in range(1,nr_images):
        if nr_images <= ( (i * ar_cs[0]) * (i * ar_cs[1]) ):
            ncols = i * ar_cs[1]
            nrows = i * ar_cs[0]
            break
    # ---
    log.info("{} images found. Contact Sheet grid is set to (ncolsXnrows): {}x{} (aspect ratio of sheet is set to {}:{})".format(nr_images, ncols,nrows,nrows,ncols) )
    if (ar_cs[1] / ar_cs[0]) != (ncols / nrows): #plausi check
        raise Exception("Ouch. aspect ratio of contact sheet is not okay. :-/")

    # --- calculate space usage
    free_slots = ncols * nrows - nr_images
    if free_slots > ncols:
        log.warning("there's free space for {} items. Suggestion: add {} images, try aspect ratio 'free' or just don't care ;)".format(free_slots, free_slots))
    log.warning("{} empty rows. {} empty slot in last row which contains an image.".format(free_slots // ncols, free_slots % ncols))
    # --- optimize - try to find a grid where no slots are free (example 8 => (2, 4))
    if free_slots > 0 and ar_name == 'free':
        res = get_optimized_grid(nr_images) # experimental ;)
        if res:
            ar_cs = res
            aspect_ratio[ar_name] = ar_cs
            ncols = ar_cs[1]
            nrows = ar_cs[0]
            log.info("Contact Sheet ratio 'free' => grid optimized to (ncolsXnrows): {}x{} (aspect ratio of sheet is set to {}:{})".format(ncols,nrows,nrows,ncols) )
        else:
            log.info("Contact Sheet ratio 'free' => no optimzed alternative found.".format() )
    # ---

    # set size of thumbnails
    photow = THUMBNAIL_SIZE; photoh = photow
    if len(sys.argv) >= 4:
        photow = thumb_size
        photoh = photow
    log.info("photow {} / photoh {} = {} || ar_w {} / ar_h {} = {}".format(photow, photoh, photow / photoh, ar_cs[1], ar_cs[0], ar_cs[1] / ar_cs[0]))
    padding = int(photow / 8)
    mar = int(padding / 2)
    marl = mar; mart = mar; marr = mar; marb = mar
    # --- precalc image size
    marw = marl+marr
    marh = mart+ marb
    padw = (ncols-1)*padding
    padh = (nrows-1)*padding
    isize = (ncols*photow+marw+padw,nrows*photoh+marh+padh)
    # ---
    log.info("Contact Sheet size: {}".format(isize))

    img = make_contact_sheet(fqfn_images, ncols = ncols, nrows = nrows,
        photow = photow, photoh = photoh, padding=padding,
        marl=mar, mart=mar, marr=mar, marb = mar,
        thumb_as_polaroid = as_polaroid, add_text = add_text, f_font = f_font
        )
    img.save(f_out)
